import{_ as n,p as a,q as e,a1 as o}from"./framework-35a8e870.js";const t={};function p(l,s){return a(),e("div",null,s[0]||(s[0]=[o(`<h1 id="uploud-de-anexo" tabindex="-1"><a class="header-anchor" href="#uploud-de-anexo" aria-hidden="true">#</a> Uploud de Anexo</h1><p>No uploud de arquivos utilizando o Laravel eu utilizei a mesma base que foi desenvolvida no uploud de imagem, apenas acrescentei algumas coisas a mais no insert no banco de dados!</p><p>O padrão de criação de uploud de arquivos que eu deixei foi &quot;FilesExemplo&quot;</p><blockquote><p>(OBS) No lugar de exemplo coloque o tipo de documento que será anexado.</p></blockquote><p>Vamos começar criando o model e a migration.</p><p><strong>Terminal</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:model FilesRqpsAws <span class="token parameter variable">-m</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Agora no seu arquivo Model que foi criado coloque os seguintes itens de protect:</p><p><strong>FilesRqpsAws.php</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code> <span class="token keyword">protected</span> <span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
     <span class="token string single-quoted-string">&#39;file_name&#39;</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">&#39;mime_type&#39;</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">&#39;file_size&#39;</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">&#39;file_path&#39;</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">&#39;file_original_name&#39;</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">&#39;status&#39;</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">,</span>
     <span class="token string single-quoted-string">&#39;rwps_aws_id&#39;</span><span class="token punctuation">,</span>
 <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Repare que eu mudei o ultimo campo de acordo com o ID que iremos criar na Migration do Laravel.</p><p>Agora no arquivo de migration que foi criada cm o nosso primeiro comando &quot;2018_07_10_182214_create_files_rqps_aws_table.php&quot;, você deve colocar as seguintes linhas.</p><p><strong>2018_07_10_182214_create_files_rqps_aws_table.php</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;files_rqps_aws&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">dropIfExists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;files_rqps_aws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>(OBS) Ali onde tem o comentário de &quot;O nome original do arquivo&quot;, é o único local diferente de um uploud de imagem, pois aqui é necessário que o nome do arquivo original seja salvo e depois apresentado novamente para o usuário.</p></blockquote><p>Após ter feito as implementações acima . Rode:</p><p><strong>Terminal</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan migrate:refresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>(OBS) Este comando reseta o banco de dados e já cria a tabela cuja qual acabamos de fazer.</p></blockquote><p>Se o seu projeto tiver alguma seeder, você pode roda-lá também.</p><p>Agora vamos para a nossa View, de cadastro, no meu caso o create.blade.php, deve ser feito nele e não no form.blade.php, pois como o form é utilizado no create e no edit, a nossa requisição de imagem serve apenas para o create. (OBS) O edit também terá a mesma funcionalidade de mandar uploud de arquivos com o diferencial de listar os itens que ja foram adicionados.</p><p>Entre no seu arquivo view create.blade.php e coloque o seguinte trecho de código dentro do seu formulário.</p><p><strong>create.blade.php</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">INI</span><span class="token punctuation">:</span> Anexos <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;col-sm-12&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;row&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;col-lg-12&quot;</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;panel panel-default&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;panel-heading clearfix&quot;</span><span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span>h4 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;panel-title pull-left&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;titles.attachment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;btn-group pull-right&quot;</span><span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;panel-body&quot;</span><span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;form-group&quot;</span><span class="token operator">&gt;</span>
                            <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token class-name static-context">Form</span><span class="token operator">::</span><span class="token function">label</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;temperature_min&#39;</span><span class="token punctuation">,</span> <span class="token function">trans</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;titles.attachment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
                            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">&quot;file&quot;</span> name<span class="token operator">=</span><span class="token string double-quoted-string">&quot;files[]&quot;</span> multiple <span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token constant">FIM</span><span class="token punctuation">:</span> Anexos <span class="token operator">--</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Este trecho de código faz com que seja solicitado o input dos arquivos.</p><p>Repare que na classe input do HTML a tag &quot;name&quot; que esta com &quot;files[]&quot; esta com estes colchetes, são eles que permitem a inclusão de arquivos simultâneos. Sem eles é apenas feito uploud de um arquivo por vez.</p>`,26)]))}const r=n(t,[["render",p],["__file","index.html.vue"]]);export{r as default};
