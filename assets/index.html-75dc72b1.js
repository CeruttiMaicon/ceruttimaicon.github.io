import{_ as s,p as a,q as e,a1 as o}from"./framework-35a8e870.js";const t={};function p(i,n){return a(),e("div",null,n[0]||(n[0]=[o(`<h1 id="laravel-relationship" tabindex="-1"><a class="header-anchor" href="#laravel-relationship" aria-hidden="true">#</a> Laravel Relationship</h1><h2 id="contexto" tabindex="-1"><a class="header-anchor" href="#contexto" aria-hidden="true">#</a> Contexto</h2><p>Quando o Laravel utiliza de banco de dados relacionais ele pode usar o Relationships do proprio framework para fazer os relacionamentos entre as tabelas para facilitar no desenvolvimento.</p><h2 id="um-pra-um" tabindex="-1"><a class="header-anchor" href="#um-pra-um" aria-hidden="true">#</a> Um pra um</h2><p>Ex: Um usuario possui um telefone</p><p><strong>App/User</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> \\<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasOne</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\Phone&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="relacionamento-inverso" tabindex="-1"><a class="header-anchor" href="#relacionamento-inverso" aria-hidden="true">#</a> Relacionamento inverso</h2><p><strong>App/Phone</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Phone</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> \\<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\User&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="um-pra-muitos" tabindex="-1"><a class="header-anchor" href="#um-pra-muitos" aria-hidden="true">#</a> Um pra muitos</h2><p>Um relacionamento um-para-muitos é usado para definir relacionamentos em que um único modelo possui qualquer quantidade de outros modelos.</p><p>Por exemplo, uma postagem de blog pode ter um número infinito de comentários.</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">comments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> \\<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\Comment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="relacionamento-inverso-1" tabindex="-1"><a class="header-anchor" href="#relacionamento-inverso-1" aria-hidden="true">#</a> Relacionamento inverso</h2><p><strong>App/Comments</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Comment</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> \\<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\Post&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="muitos-pra-muitos" tabindex="-1"><a class="header-anchor" href="#muitos-pra-muitos" aria-hidden="true">#</a> Muitos pra Muitos</h2><p>Muitos-para-muitos relações são um pouco mais complicado do que <strong>hasOne</strong> e <strong>hasMany</strong> relacionamentos. Um exemplo de tal relacionamento é um usuário com várias funções, em que as funções também são compartilhadas por outros usuários. Por exemplo, muitos usuários podem ter o papel de &quot;Admin&quot;. Para definir essa relação, são necessários três tabelas de banco de dados: <strong>users</strong>, <strong>roles</strong>, e <strong>role_user</strong>. A <strong>role_user</strong> tabela é derivada da ordem alfabética dos nomes de modelos relacionados e contém as colunas <strong>user_id</strong> e <strong>role_id</strong>.</p><p>Muitos-para-muitos relacionamentos são definidos escrevendo um método que retorna o resultado do <strong>belongsToMany</strong> método. Por exemplo, vamos definir o <strong>roles</strong> método em nosso model <strong>User</strong>:</p><p><strong>App/User</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">roles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> \\<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsToMany</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\Role&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="relacionamento-inverso-2" tabindex="-1"><a class="header-anchor" href="#relacionamento-inverso-2" aria-hidden="true">#</a> Relacionamento inverso</h2><p><strong>App/Role</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">Role</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> \\<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsToMany</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\User&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recuperando-colunas-da-tabela-intermediaria" tabindex="-1"><a class="header-anchor" href="#recuperando-colunas-da-tabela-intermediaria" aria-hidden="true">#</a> Recuperando Colunas da Tabela Intermediária</h2><p>Como você já aprendeu, trabalhar com relações muitos-para-muitos requer a presença de uma tabela intermediária. Eloquent fornece algumas maneiras muito úteis de interagir com esta tabela. Por exemplo, vamos supor que nosso <strong>User</strong> objeto tenha muitos <strong>Role</strong> objetos com os quais ele está relacionado. Depois de acessar esse relacionamento, podemos acessar a tabela intermediária usando o <strong>pivot</strong> atributo nos modelos:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>User</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">roles</span> <span class="token keyword">as</span> <span class="token variable">$role</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> \\<span class="token variable">$role</span><span class="token operator">-&gt;</span><span class="token property">pivot</span><span class="token operator">-&gt;</span><span class="token property">created_at</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="customizando-o-pivot-nome-do-atributo" tabindex="-1"><a class="header-anchor" href="#customizando-o-pivot-nome-do-atributo" aria-hidden="true">#</a> Customizando o pivot Nome do Atributo</h2><p>Como observado anteriormente, os atributos da tabela intermediária podem ser acessados ​​nos modelos usando o <strong>pivot</strong> atributo. No entanto, você está livre para personalizar o nome desse atributo para refletir melhor sua finalidade em seu aplicativo.</p><p>Por exemplo, se seu aplicativo contiver usuários que podem se inscrever em podcasts, você provavelmente terá um relacionamento muitos-para-muitos entre usuários e podcasts. Se este for o caso, você pode querer renomear seu acessador de tabelas intermediárias em <strong>subscription</strong> vez de <strong>pivot</strong>. Isso pode ser feito usando o <strong>&quot;as&quot;</strong> método ao definir o relacionamento:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">return</span> \\<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsToMany</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;App\\Podcast&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;subscription&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">withTimestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Feito isso, você pode acessar os dados da tabela intermediária usando o nome personalizado:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;podcasts&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span><span class="token operator">-&gt;</span><span class="token property">flatMap</span><span class="token operator">-&gt;</span><span class="token property">podcasts</span> <span class="token keyword">as</span> <span class="token variable">$podcast</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$podcast</span><span class="token operator">-&gt;</span><span class="token property">subscription</span><span class="token operator">-&gt;</span><span class="token property">created_at</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filtrando-relacionamentos-atraves-de-colunas-da-tabela-intermediaria" tabindex="-1"><a class="header-anchor" href="#filtrando-relacionamentos-atraves-de-colunas-da-tabela-intermediaria" aria-hidden="true">#</a> Filtrando Relacionamentos Através de Colunas da Tabela Intermediária</h2><p>Você também pode filtrar os resultados retornados <strong>belongsToMany</strong> usando os métodos <strong>wherePivot</strong> e <strong>wherePivotIn</strong> ao definir o relacionamento:</p>`,36)]))}const l=s(t,[["render",p],["__file","index.html.vue"]]);export{l as default};
