import{_ as o,M as p,p as i,q as l,a1 as r,R as n,t as s,N as t}from"./framework-35a8e870.js";const c={},u={href:"https://blog.especializati.com.br/laravel-redirecionar-apos-autenticacao/#autor",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.especializati.com.br/gerar-pdf-no-laravel-com-dompdf/",target:"_blank",rel:"noopener noreferrer"};function k(m,a){const e=p("ExternalLinkIcon");return i(),l("div",null,[a[6]||(a[6]=r(`<h1 id="dom-pdf" tabindex="-1"><a class="header-anchor" href="#dom-pdf" aria-hidden="true">#</a> DOM PDF</h1><p>Link de acesso a documentação no GitHub:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://github.com/barryvdh/laravel-dompdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ferramentas" tabindex="-1"><a class="header-anchor" href="#ferramentas" aria-hidden="true">#</a> Ferramentas</h2><p>Para gerar PDF no Laravel vamos utilizar uma importante e conhecido pacote chamado DOMPDF.</p><p>Primeiramente execute o comando abaixo para fazer a instalação deste pacote no Laravel rode o comando:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">composer</span> require barryvdh/laravel-dompdf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Segundo as instruções do tutorial: &quot;Após baixar o pacote precisa registrar o provider e aliases (no Laravel 5.5 não precisa porque o recurso de autodiscover faz isso automaticamente).&quot;. Como utilizamos a versão do Laravel 5.6, vamos ao próximo passo.</p><p>Adicione os providers:</p><p><strong>/config/app.php</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Barryvdh<span class="token punctuation">\\</span>DomPDF<span class="token punctuation">\\</span>ServiceProvider::class,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>E em aliases adicione:</p><p><strong>/config/app.php</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&#39;PDF&#39;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> Barryvdh<span class="token punctuation">\\</span>DomPDF<span class="token punctuation">\\</span>Facade::class,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Para gerar o arquivo de configuração e ter a possibilidade de alterar algumas configurações padrões rode este comando:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan vendor:publish <span class="token parameter variable">--provider</span><span class="token operator">=</span><span class="token string">&quot;Barryvdh\\DomPDF\\ServiceProvider&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Após rodar o comando irá gerar um arquivo de configuração do DOMPDF em /config/dompdf.php</p><p>Feito isso o pacote está instalado e registrado.</p><h2 id="utilizando" tabindex="-1"><a class="header-anchor" href="#utilizando" aria-hidden="true">#</a> Utilizando</h2><p>Crie a função no controller que deseja imprimir o PDF.</p><p><strong>ExemploController.php</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">PDF</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fun_pdf</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$pdf</span> <span class="token operator">=</span> <span class="token class-name static-context">PDF</span><span class="token operator">::</span><span class="token function">loadView</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;eps_aws.showPDF&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$pdf</span><span class="token operator">-&gt;</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;invoice.pdf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(ou use a função &#39;stream&#39; no lugar de &#39;download&#39;)</p><p>Se for necessario passar argumentos por variaveis para a view imprimir você deve utilizar o parametro compact para enviar os dados.</p><p><strong>Exemplo2Controller.php</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">PDF</span><span class="token punctuation">;</span>

<span class="token variable">$name_pass</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;passes&quot;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token property">pass</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$name_electrodes</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;electrodes&quot;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token property">electrodes</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fun_pdf</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$pdf</span> <span class="token operator">=</span> <span class="token class-name static-context">PDF</span><span class="token operator">::</span><span class="token function">loadView</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;eps_aws.showPDF&#39;</span><span class="token punctuation">,</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name_pass&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name_electrodes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$pdf</span><span class="token operator">-&gt;</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;invoice.pdf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>E ajuste uma rota para que a função seja chamada.</p><p><strong>routes/web.php</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;eps_aws/pdf/{id}&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;ExemploController@fun_pdf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Repare que deixei o &quot;{id}&quot; para que na geração de documentos ele pegue os dados pelo id e ja os jogue no PDF. Para que no botão de importar para PDF possa ser feito do seguinte modo:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-sm btn-primary<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ url(&#39;eps_aws/pdf&#39;, $data-&gt;id) }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ trans(&#39;buttons.downloadPDF&#39;) }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pronto!</p><p>O seu PDF terá um resultado semelhante a esse:</p><blockquote><p>(obs: lembre-se que um PDF é um documento bem mais simples e por isso ele não suporta varias Tags de estilo CSS e HTML. E o DOMPDF também não suporta o bootstrap até o momento).</p></blockquote><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Referências</h2>`,35)),n("p",null,[n("a",u,[a[0]||(a[0]=s("Carlos Ferreita")),t(e)]),a[2]||(a[2]=s(". ")),a[3]||(a[3]=n("strong",null,"Gerar PDF no Laravel com DOMPDF",-1)),a[4]||(a[4]=s(". ")),n("a",d,[a[1]||(a[1]=s("https://blog.especializati.com.br/gerar-pdf-no-laravel-com-dompdf/")),t(e)]),a[5]||(a[5]=s("Acesso em: 14 dez 2019."))])])}const g=o(c,[["render",k],["__file","index.html.vue"]]);export{g as default};
